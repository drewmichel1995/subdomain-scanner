events { }

http {

	fastcgi_read_timeout 999999;
    proxy_read_timeout 999999;
	 
	sendfile on;

    upstream docker-server {
        server server:5000;
    }

    upstream docker-client {
        server client:4200;
    }

	server {
		server_name localhost;
		ssl_certificate /etc/nginx/certs/localhost.crt;
		ssl_certificate_key /etc/nginx/certs/localhost.key;
		listen 443 ssl;
		
		
		location /server/ {
			set $cors '';
			if ($http_origin ~ '^https?://(localhost|www\.yourdomain\.com|www\.yourotherdomain\.com)') {
							set $cors 'true';
			}
			
			if ($cors = 'true') {
							
							add_header 'Access-Control-Allow-Credentials' 'true' always;
							add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
							add_header 'Access-Control-Allow-Headers' 'Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Requested-With' always;
							# required to be able to read Authorization header in frontend
							#add_header 'Access-Control-Expose-Headers' 'Authorization' always;
			}
			
			if ($request_method = 'OPTIONS') {
							# Tell client that this pre-flight info is valid for 20 days
							add_header 'Access-Control-Max-Age' 1728000;
							add_header 'Content-Type' 'text/plain charset=UTF-8';
							add_header 'Content-Length' 0;
							return 204;
			}
			proxy_pass http://docker-server;
			rewrite ^/server(.*)$ $1 break;
		}
	
		location / {
			proxy_pass http://docker-client/;
			
		}
  }

}